@model IEnumerable<Front.Models.Estado>

@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>
<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Nome)
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Nome)
            </td>
            <td>
                @Html.ActionLink("Edit", "Edit", new { id = item.EstadoId }) |
                @Html.ActionLink("Details", "Details", new { id = item.EstadoId }) |
                @Html.ActionLink("Delete", "Delete", new { id = item.EstadoId })
                @Html.ActionLink("Cidades", "GetCidades", "Cidades", new {
               Href = "#",
               data_toggle = "modal",
               data_target = "#cidadeModal", data_url = Url.Action("GetCidades", "Estados", new { id = item.EstadoId }) })
            </td>
        </tr>
    }

</table>
<div class="modal fade" id="cidadeModal" tabindex="-1" role="dialog" aria-labelledby="cidadeModalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $('#cidadeModal').on('show.bs.modal', function (event) {
            var button = $(event.relatedTarget) // Button that triggered the modal
            var url = button.data('url') // Extract info from data-* attributes
            // If necessary, you could initiate an AJAX request here (and then do the updating in a callback).
            // Update the modal's content. We'll use jQuery here, but you could use a data binding library or other methods instead.
            var modal = $(this)
            modal.find('.modal-content').load(url)
        })
    </script>
}